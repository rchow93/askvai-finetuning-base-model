[
  {
    "instruction": "How do I create an Agent in CrewAI?",
    "input": "",
    "output": "You can create an Agent in CrewAI using two approaches:\n\n1. Using YAML configuration (recommended):\n```python\n# Define agent in YAML\n# src/your_project/config/agents.yaml\nresearcher:\n  role: >\\n    Senior Data Researcher\n  goal: >\\n    Uncover cutting-edge developments in AI\n  backstory: >\\n    You're a seasoned researcher with a knack for uncovering the latest developments in AI.\n```\n\nThen in your code:\n```python\nfrom crewai import Agent, Crew\nfrom crewai.project import CrewBase, agent\n\n@CrewBase\nclass YourCrew():\n    agents_config = \"config/agents.yaml\"\n    \n    @agent\n    def researcher(self) -> Agent:\n        return Agent(\n            config=self.agents_config['researcher'],\n            verbose=True\n        )\n```\n\n2. Directly in Python code:\n```python\nfrom crewai import Agent\n\nresearcher = Agent(\n    role=\"Senior Data Researcher\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You're a seasoned researcher with a knack for uncovering the latest developments in AI.\",\n    verbose=True\n)\n```"
  },
  {
    "instruction": "What are the main attributes of a Crew class in CrewAI?",
    "input": "",
    "output": "The Crew class in CrewAI has several key attributes for collaborative functionalities:\n\n1. Language Model Management:\n   - manager_llm: For hierarchical processes to coordinate agents\n   - function_calling_llm: Optional default model for streamlined interactions\n\n2. Process Flow:\n   - process: Defines execution logic (sequential, hierarchical)\n\n3. Monitoring and Logging:\n   - verbose: Enables detailed logging\n   - step_callback/task_callback: For monitoring execution\n   - usage_metrics: Logs LLM usage metrics\n\n4. Resource Management:\n   - max_rpm: Limits requests per minute\n   - cache: Specifies whether to cache tool results\n\n5. Memory and Context:\n   - memory: Stores execution history\n   - respect_context_window: Prevents token limit issues\n\n6. Output Control:\n   - full_output: Controls output granularity\n\nExample usage:\n```python\nfrom crewai import Crew, Process\n\ncrew = Crew(\n    agents=[researcher, analyst, writer],\n    tasks=[research_task, analysis_task],\n    process=Process.sequential,\n    verbose=True,\n    memory=True,\n    max_rpm=30\n)\n```"
  },
  {
    "instruction": "How do I implement delegation between agents in CrewAI?",
    "input": "",
    "output": "Delegation in CrewAI allows agents to distribute tasks or seek help from other agents with specific expertise:\n\n1. Enable delegation on the agent:\n```python\nresearcher = Agent(\n    role=\"Senior Researcher\",\n    goal=\"Gather comprehensive information\",\n    backstory=\"You excel at finding precise data\",\n    allow_delegation=True  # This enables delegation capability\n)\n```\n\n2. Types of delegation available:\n   - Task Assignment: Assign specific subtasks to other agents\n   - Information Requests: Query other agents for specific information\n   - Expertise Consultation: Seek specialized knowledge\n\n3. Delegation process flow:\n   - Agent identifies a need for delegation\n   - Agent selects the appropriate team member based on expertise\n   - Request is formulated and sent to the selected agent\n   - Receiving agent processes the request and returns results\n   - Original agent incorporates the received information\n\nThis allows the crew to operate like a coordinated team, with each agent focusing on what it does best while leveraging the collective intelligence of the entire crew."
  },
  {
    "instruction": "How do I use the CrewAI CLI?",
    "input": "",
    "output": "The CrewAI Command Line Interface (CLI) provides tools to create, manage, and run CrewAI projects:\n\n1. Installation:\n```bash\npip install crewai\n```\n\n2. Basic syntax:\n```bash\ncrewai [COMMAND] [OPTIONS] [ARGUMENTS]\n```\n\n3. Key commands:\n\n   Create new components:\n   ```bash\n   crewai create crew my_new_crew\n   crewai create flow my_new_flow\n   ```\n\n   Run your crew or flow:\n   ```bash\n   crewai run\n   ```\n\n   Check version:\n   ```bash\n   crewai version\n   crewai version --tools  # Shows tools version too\n   ```\n\n   Train your crew:\n   ```bash\n   crewai train -n 10 -f my_training_data.pkl\n   ```\n\n   Reset memories:\n   ```bash\n   crewai reset-memories --all\n   ```\n\n   Interactive mode:\n   ```bash\n   crewai chat\n   ```\n\n   View task outputs:\n   ```bash\n   crewai log-tasks-outputs\n   ```\n\n   Replay from specific tasks:\n   ```bash\n   crewai replay -t task_123456\n   ```"
  },
  {
    "instruction": "What advanced Agent attributes are available in CrewAI?",
    "input": "",
    "output": "CrewAI Agents have numerous advanced attributes for fine-grained control:\n\n1. Core Identity:\n```python\nagent = Agent(\n    role=\"Senior Data Analyst\",      # Job/function in the crew\n    goal=\"Extract actionable insights\", # Individual objective\n    backstory=\"You're a data expert with 10 years experience...\", # Context/personality\n)\n```\n\n2. Language Model Configuration:\n```python\nagent = Agent(\n    # Basic attributes...\n    llm=\"gpt-4\",  # Default: OPENAI_MODEL_NAME or \"gpt-4\"\n    function_calling_llm=\"gpt-3.5-turbo\", # Separate LLM for tool calls\n    use_system_prompt=True, # For o1 model support\n)\n```\n\n3. Execution Control:\n```python\nagent = Agent(\n    # Basic attributes...\n    max_iter=20,  # Maximum iterations before giving best answer\n    max_rpm=10,   # Rate limiting for API calls\n    max_execution_time=300,  # 5-minute timeout in seconds\n    max_retry_limit=3,  # Retries when errors occur\n)\n```\n\n4. Memory and Context:\n```python\nagent = Agent(\n    # Basic attributes...\n    memory=True,  # Enable conversation history\n    respect_context_window=True,  # Prevent token limit issues\n    embedder={\"provider\": \"openai\"},  # Custom embedding configuration\n    knowledge_sources=[my_knowledge_base],  # Domain-specific knowledge\n)\n```\n\n5. Code Execution:\n```python\nagent = Agent(\n    # Basic attributes...\n    allow_code_execution=True,  # Enable code running\n    code_execution_mode=\"safe\",  # Options: \"safe\" (Docker) or \"unsafe\" (direct)\n)\n```\n\n6. Collaboration Settings:\n```python\nagent = Agent(\n    # Basic attributes...\n    allow_delegation=True,  # Enable task delegation to other agents\n    step_callback=my_monitoring_function,  # For live monitoring\n    verbose=True,  # Enable detailed logging\n    cache=True,  # Cache tool results for efficiency\n)\n```"
  },
  {
    "instruction": "What are the collaboration features in CrewAI and how do they work?",
    "input": "",
    "output": "CrewAI provides several collaboration features that enable agents to work together effectively:\n\n1. Information Sharing Mechanisms:\n   - Task Context Passing:\n   ```python\n   analysis_task = Task(\n       description=\"Analyze research findings\",\n       agent=analyst,\n       context=[research_task]  # Output of research_task becomes input for analysis_task\n   )\n   ```\n   - Memory Systems: Multiple memory types for shared information\n\n2. Task Delegation:\n   ```python\n   senior_agent = Agent(\n       role=\"Senior Analyst\",\n       goal=\"Oversee analysis process\",\n       allow_delegation=True  # Can delegate subtasks to other agents\n   )\n   ```\n\n3. Process Management:\n   - Sequential Workflow:\n   ```python\n   crew = Crew(\n       agents=[agent1, agent2, agent3],\n       tasks=[task1, task2, task3],\n       process=Process.sequential\n   )\n   ```\n   - Hierarchical Process:\n   ```python\n   crew = Crew(\n       agents=[manager_agent, worker1, worker2],\n       tasks=[main_task],\n       process=Process.hierarchical  # Creates manager-workers structure\n   )\n   ```\n\n4. Planning Mode:\n   ```python\n   crew = Crew(\n       agents=[agent1, agent2],\n       tasks=[task1, task2],\n       planning=True  # Enables action planning before execution\n   )\n   ```\n\n5. Resource Management:\n   - Tool Sharing across agents\n   - Rate Limiting for API calls"
  },
  {
    "instruction": "How do I create custom tools for CrewAI agents?",
    "input": "",
    "output": "Creating custom tools for CrewAI agents extends their capabilities:\n\n1. Create a custom tool by extending BaseTool:\n```python\nfrom crewai import Agent, Task, Crew\nfrom crewai.tools import BaseTool\n\nclass StockPriceTool(BaseTool):\n    name = \"Stock Price Tool\"\n    description = \"Retrieves the current price of a given stock symbol\"\n    \n    def _run(self, stock_symbol: str) -> str:\n        # Implement your logic to fetch stock prices\n        # This could call an API, query a database, etc.\n        return f\"The current price of {stock_symbol} is $150.25\"\n\n# Create an instance of your tool\nstock_tool = StockPriceTool()\n\n# Assign the tool to an agent\nfinancial_analyst = Agent(\n    role=\"Financial Analyst\",\n    goal=\"Provide investment recommendations\",\n    backstory=\"You analyze stocks and provide insights\",\n    tools=[stock_tool]\n)\n```\n\n2. Tool types available in CrewAI:\n   - Built-in tools (SerperDevTool, WebsiteSearchTool, FileReadTool)\n   - LangChain tools integration\n   - API integration tools\n   - Database query tools\n   - Local computation tools\n\n3. Assign tools at the task level:\n```python\ntask = Task(\n    description=\"Research recent stock performance\",\n    agent=financial_analyst,\n    tools=[stock_tool, news_tool]  # Override agent's tools for this task\n)\n```"
  },
  {
    "instruction": "How does the hierarchical process work in CrewAI?",
    "input": "",
    "output": "The hierarchical process in CrewAI implements a manager-workers structure that enables sophisticated collaboration patterns:\n\n1. Basic setup:\n```python\nfrom crewai import Crew, Process\n\ncrew = Crew(\n    agents=[manager_agent, worker1, worker2, worker3],\n    tasks=[main_task],\n    process=Process.hierarchical\n)\n```\n\n2. Execution flow:\n   - A manager agent is automatically selected or explicitly defined\n   - The manager receives the main task and creates a plan\n   - The manager delegates subtasks to appropriate worker agents\n   - Workers execute their assigned subtasks and report results\n   - The manager coordinates, provides feedback, and consolidates results\n\n3. Custom manager definition:\n```python\n# Define a specific agent as the manager\ncrew = Crew(\n    agents=[worker1, worker2, worker3],\n    tasks=[main_task],\n    manager_agent=custom_manager,  # Explicitly set the manager\n    process=Process.hierarchical\n)\n```\n\n4. Manager's language model:\n```python\n# Specify a powerful LLM for the manager's coordination duties\ncrew = Crew(\n    agents=[worker1, worker2, worker3],\n    tasks=[main_task],\n    process=Process.hierarchical,\n    manager_llm=\"gpt-4o\"  # Use a specific model for the manager\n)\n```\n\nThe hierarchical process is best suited for complex projects requiring intelligent task decomposition, coordination, and oversight."
  },
  {
    "instruction": "What are best practices for optimizing CrewAI performance?",
    "input": "",
    "output": "Best practices for optimizing CrewAI performance include:\n\n1. Language Model Management:\n```python\nresearch_agent = Agent(\n    role=\"Researcher\",\n    goal=\"Gather information\",\n    llm=\"gpt-4o\",  # Premium model for complex reasoning\n    function_calling_llm=\"gpt-3.5-turbo\"  # Cheaper model for tool calling\n)\n```\n\n2. Context Window Optimization:\n```python\nagent = Agent(\n    role=\"Data Analyst\",\n    goal=\"Analyze complex datasets\",\n    respect_context_window=True  # Prevents token limit issues\n)\n```\n\n3. Rate Limiting:\n```python\ncrew = Crew(\n    agents=[agent1, agent2],\n    tasks=[task1, task2],\n    max_rpm=20  # Limit to 20 requests per minute\n)\n```\n\n4. Execution Time Limits:\n```python\nagent = Agent(\n    max_execution_time=300  # 5-minute timeout\n)\n```\n\n5. Tool Result Caching:\n```python\nagent = Agent(\n    cache=True  # Cache tool results\n)\n```\n\n6. Task Granularity: Define appropriately sized tasks\n\n7. Parallel Execution:\n```python\ntask = Task(\n    async_execution=True  # Enable parallel execution\n)\n```\n\n8. Iteration Control:\n```python\nagent = Agent(\n    max_iter=10  # Limit iterations to prevent infinite loops\n)\n```\n\n9. Telemetry and Logging:\n```python\ncrew = Crew(\n    verbose=True,  # Enable detailed logging\n    usage_metrics=True,  # Track LLM usage\n)\n```"
  },
  {
    "instruction": "What is the relationship between Tasks and Agents in CrewAI?",
    "input": "",
    "output": "In CrewAI, Tasks and Agents have a symbiotic relationship:\n\n1. Fundamental Relationship:\n   - Agents are the \"who\" - specialized AI entities with roles, goals, and capabilities\n   - Tasks are the \"what\" - specific work items that need to be accomplished\n\n```python\nfrom crewai import Agent, Task\n\n# Define who does the work\nanalyst = Agent(\n    role=\"Financial Analyst\",\n    goal=\"Provide accurate financial insights\",\n    backstory=\"You have 15 years of Wall Street experience\"\n)\n\n# Define what needs to be done\nanalysis_task = Task(\n    description=\"Analyze Q4 financial results and identify key trends\",\n    expected_output=\"Comprehensive financial analysis report\",\n    agent=analyst  # Assign the task to a specific agent\n)\n```\n\n2. Assignment Types:\n   - Direct Assignment: Tasks explicitly assigned to agents\n   - Dynamic Assignment: Manager agents can assign subtasks in hierarchical processes\n\n3. Task Context:\n```python\nsummary_task = Task(\n    description=\"Create executive summary\",\n    agent=writer,\n    context=[research_task, analysis_task]  # These task outputs become inputs\n)\n```\n\n4. Tool Override:\n```python\n# Agent has default tools\nagent = Agent(role=\"Analyst\", tools=[tool1, tool2])\n\n# Task overrides with specific tools\ntask = Task(\n    description=\"Specialized analysis\",\n    agent=agent,\n    tools=[specialized_tool]  # Overrides agent's default tools\n)\n```\n\nThe Tasks-Agents relationship resembles a real-world organizational structure where specialized team members are assigned specific responsibilities based on their skills."
  },
  {
    "instruction": "What types of applications can be built with CrewAI?",
    "input": "",
    "output": "CrewAI can be used to build various applications including:\n\n1. Business Intelligence & Research:\n   - Market research automation with researcher, analyst, and writer agents\n   - Competitive intelligence for monitoring competitors' products and strategies\n\n2. Content Creation & Marketing:\n   - Content marketing pipelines with research, strategy, writing, and editing agents\n   - Personalized marketing with data analysts and copywriters\n\n3. Software Development:\n   - Code generation & review with architect, developer, and reviewer agents\n   - Bug hunting & fixing with diagnostic and debugging agents\n\n4. Financial Services:\n   - Investment research with financial researchers and analysts\n   - Financial planning with data collectors and advisors\n\n5. Customer Support:\n   - Tiered support systems with first-line support and technical specialists\n   - Customer feedback analysis for product improvements\n\n6. Research & Academia:\n   - Literature review automation\n   - Hypothesis testing with researcher and statistician agents\n\nCrewAI's collaborative approach makes it ideal for complex workflows that benefit from specialized expertise working in coordination, particularly when tasks require research, analysis, creativity, and strategic thinking."
  },
  {
    "instruction": "How do I implement memory in CrewAI agents?",
    "input": "",
    "output": "Implementing memory in CrewAI agents allows them to retain information across interactions:\n\n1. Basic Memory Implementation:\n```python\nfrom crewai import Agent\n\nagent = Agent(\n    role=\"Financial Analyst\",\n    goal=\"Provide comprehensive financial analysis\",\n    backstory=\"Expert with 15 years experience in financial markets\",\n    memory=True  # Enable memory capabilities\n)\n```\n\n2. Advanced Memory Configuration:\n```python\nagent = Agent(\n    role=\"Research Specialist\",\n    goal=\"Build comprehensive knowledge base\",\n    memory=True,\n    respect_context_window=True,  # Prevents token limit issues with large memories\n    embedder={  # Configure custom embedding for memory retrieval\n        \"provider\": \"openai\",\n        \"config\": {\n            \"model\": \"text-embedding-3-small\"\n        }\n    }\n)\n```\n\n3. Memory Management:\n   - Reset memories using CLI:\n   ```bash\n   # Reset specific memory types\n   crewai reset-memories --long --short\n\n   # Reset all memories\n   crewai reset-memories --all\n   ```\n\n   - Reset programmatically:\n   ```python\n   from crewai.memory import Memory\n\n   # Reset memories for a specific agent\n   agent_memory = Memory(agent_id=\"agent123\")\n   agent_memory.reset()\n\n   # Reset all memories across all agents\n   Memory.reset_all()\n   ```\n\n4. Using Memory in Workflows:\n```python\n# Initial analysis task\ninitial_task = Task(\n    description=\"Analyze Q1 financial data and identify key trends\",\n    agent=analyst\n)\n\n# Follow-up task that benefits from memory\nfollow_up_task = Task(\n    description=\"Compare Q1 trends with previous quarterly patterns\",\n    agent=analyst  # Same agent can recall previous analysis\n)\n```"
  },
  {
    "instruction": "How do I use the process planning feature in CrewAI?",
    "input": "",
    "output": "Process Planning in CrewAI enables agents to create and execute a structured plan before tackling complex tasks:\n\n1. Basic Planning Implementation:\n```python\nfrom crewai import Crew, Agent, Task\n\n# Define your agents and tasks\nresearcher = Agent(role=\"Researcher\", goal=\"Gather comprehensive information\")\nanalyst = Agent(role=\"Analyst\", goal=\"Draw insights from research\")\nwriter = Agent(role=\"Writer\", goal=\"Create compelling content\")\n\nresearch_task = Task(description=\"Research market trends\", agent=researcher)\nanalysis_task = Task(description=\"Analyze findings\", agent=analyst)\nwriting_task = Task(description=\"Write market report\", agent=writer)\n\n# Enable planning when creating the crew\ncrew = Crew(\n    agents=[researcher, analyst, writer],\n    tasks=[research_task, analysis_task, writing_task],\n    planning=True,  # Enable the planning feature\n    verbose=True    # See the planning process in action\n)\n\nresult = crew.kickoff()\n```\n\n2. Custom Planning Templates:\n```python\ncrew = Crew(\n    agents=[researcher, analyst, writer],\n    tasks=[research_task, analysis_task, writing_task],\n    planning=True,\n    planning_template=\"\"\"Create a detailed execution plan for the following task: {main_task}\n\nAvailable Agents:\n{agents}\n\nYour plan should include:\n1. Task breakdown with specific subtasks\n2. Agent assignments for each subtask\n3. Dependencies between subtasks\n4. Evaluation criteria for success\n\nPLAN:\n\"\"\"\n)\n```\n\n3. Planning with Inputs:\n```python\n# Provide specific inputs to inform the planning process\nresult = crew.kickoff(inputs={\n    \"industry\": \"renewable energy\",\n    \"timeframe\": \"Q1 2025\",\n    \"focus_areas\": [\"technological advancements\", \"regulatory landscape\", \"market trends\"]\n})\n```\n\nProcess planning transforms CrewAI from a task execution engine into a strategic problem-solving system that approaches complex challenges with foresight and structure."
  },
  {
    "instruction": "What's the difference between allow_delegation and process=Process.hierarchical in CrewAI?",
    "input": "",
    "output": "The key differences between `allow_delegation` and `Process.hierarchical` in CrewAI:\n\n## `allow_delegation`: Agent-Level Capability\n\n```python\nfrom crewai import Agent\n\nsenior_researcher = Agent(\n    role=\"Senior Research Lead\",\n    goal=\"Coordinate research activities\",\n    backstory=\"You're an experienced research director\",\n    allow_delegation=True  # Enable delegation capability\n)\n```\n\nKey characteristics:\n- Applied at the individual agent level\n- Enables an agent to request assistance from others\n- The delegating agent maintains ownership of its task\n- Ad-hoc collaboration initiated by the agent itself\n\n## `Process.hierarchical`: Crew-Level Structure\n\n```python\nfrom crewai import Crew, Process\n\ncrew = Crew(\n    agents=[manager, worker1, worker2, worker3],\n    tasks=[main_task],\n    process=Process.hierarchical  # Enable hierarchical process\n)\n```\n\nKey characteristics:\n- Applied at the crew level (organizational structure)\n- Creates a formal manager-workers structure\n- The manager oversees the entire workflow\n- Formal hierarchy defined at crew creation\n\n## When to Use Each\n\nUse `allow_delegation` when:\n- You want agents to occasionally seek specific help\n- Tasks are primarily independent but may benefit from collaboration\n- You need a lightweight approach with minimal overhead\n\nUse `Process.hierarchical` when:\n- You have complex, multi-stage projects\n- Tasks need significant coordination and oversight\n- You want strategic planning before execution\n- Quality control and feedback loops are important\n\nYou can use both features together for maximum flexibility by enabling delegation for agents within a hierarchical crew structure."
  },
  {
    "instruction": "What is CrewAI and how does it differ from other agent frameworks?",
    "input": "",
    "output": "CrewAI is a lean, standalone Python framework for orchestrating autonomous AI agents designed for collaborative intelligence. Unlike other frameworks like LangChain, CrewAI is built entirely from scratch with no dependencies on other agent frameworks, making it faster and more resource-efficient.\n\nKey differences include:\n\n1. Flexibility: CrewAI offers both high-level simplicity through 'Crews' (autonomous agents) and precise control through 'Flows' (event-driven orchestration).\n\n2. Performance: Being standalone, it provides faster execution and lighter resource demands compared to other frameworks.\n\n3. Deep customization: You can tailor everything from high-level workflows to low-level internal prompts and agent behaviors.\n\n4. Integration: You can seamlessly combine Crews (optimized for autonomy) and Flows (optimized for precision) to create complex real-world automations.\n\n5. Community support: It's backed by robust documentation and a large community of certified developers."
  },
  {
    "instruction": "What is a Crew in CrewAI?",
    "input": "",
    "output": "A crew in CrewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow. Crews can follow different process flows (like sequential or hierarchical) and can be configured with various attributes including tasks, agents, verbosity level, and manager LLMs.\n\nTo create a basic crew:\n\n```python\nfrom crewai import Crew, Process\n\ncrew = Crew(\n    agents=[researcher, analyst, writer],  # List of agent objects\n    tasks=[research_task, analysis_task, writing_task],  # List of task objects\n    process=Process.sequential,  # How tasks will be executed\n    verbose=True  # Enable detailed logging\n)\n\nresult = crew.kickoff()  # Execute the crew's tasks\n```\n\nCrews handle the coordination between agents, manage task flows, and ensure that outputs from one task can become inputs to another task when needed."
  },
  {
    "instruction": "What are the available Process types in CrewAI?",
    "input": "",
    "output": "CrewAI provides multiple process types that determine how tasks are executed by a crew:\n\n1. Sequential Process (`Process.sequential`):\n   - Tasks execute in order one after another\n   - Output from one task becomes context for the next\n   - Best for workflows with dependencies between tasks\n\n```python\nfrom crewai import Crew, Process\n\ncrew = Crew(\n    agents=[researcher, analyst, writer],\n    tasks=[research_task, analysis_task, writing_task],\n    process=Process.sequential\n)\n```\n\n2. Hierarchical Process (`Process.hierarchical`):\n   - Creates a manager-workers structure\n   - Manager agent oversees and delegates to worker agents\n   - Good for complex projects requiring coordination\n\n```python\ncrew = Crew(\n    agents=[manager_agent, worker1, worker2, worker3],\n    tasks=[main_task],\n    process=Process.hierarchical,\n    manager_llm=\"gpt-4o\"  # Optional: specific model for manager\n)\n```\n\nThe process you choose depends on your use case - sequential for linear workflows and hierarchical for more complex coordination patterns."
  },
  {
    "instruction": "How do I set up CrewAI with a local LLM?",
    "input": "",
    "output": "Setting up CrewAI with a local LLM like Ollama is straightforward:\n\n1. Install and set up Ollama with your local model\n\n2. Connect Ollama to your CrewAI project:\n```python\nfrom langchain.llms import Ollama\n\n# Initialize the local model\nlocal_llm = Ollama(model=\"agent\")\n\n# Pass the local model to your agents\nresearcher = Agent(\n    role=\"AI Researcher\",\n    goal=\"Find the latest information on AI developments\",\n    backstory=\"You're an expert researcher in the field of AI\",\n    llm=local_llm,  # Using the local model\n    verbose=True\n)\n```\n\n3. Create your crew and tasks as usual:\n```python\nfrom crewai import Crew, Task\n\ntask = Task(\n    description=\"Research recent advancements in language models\",\n    expected_output=\"A summary of recent developments\",\n    agent=researcher\n)\n\ncrew = Crew(\n    agents=[researcher],\n    tasks=[task]\n)\n\n# Run the crew\nresult = crew.kickoff()\n```\n\nThis setup gives you full control over your models while leveraging CrewAI's collaborative framework, ideal for scenarios requiring data privacy or specialized models."
  }
]

